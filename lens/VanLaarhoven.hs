{-# LANGUAGE Rank2Types #-}
{-# LANGUAGE NoMonomorphismRestriction #-}
-- Friday, April 24, 2020
import Control.Monad.Identity

type Lens s t a b = forall f. Functor f => (a -> f b) -> s -> f t
type Lens' s a = Lens s s a a

modify :: Lens' a b -> (b -> b) -> a -> a
modify r m = runIdentity . r (Identity . m)

-- set' :: (forall f. Functor f => (b -> f b) -> a -> f a) -> a -> b -> a
set' :: Lens a a b b -> a -> b -> a
set' y a b = modify y (const b) a

-- set :: (forall f. Functor f => (b -> f b) -> a -> f a) -> b -> a -> a
set :: Lens' s a -> a -> s -> s
set y b a = set' y a b


newtype Const b a = Const { getConst :: b }
instance Functor (Const b) where
  fmap f (Const b) = Const b

-- get :: (forall f. Functor f => (b -> f b) -> a -> f a) -> a -> b
get :: Lens' a b -> a -> b
get r = getConst . r Const

view :: Lens' s a -> s -> a
view r = getConst . r Const

-- _1 :: Lens' (a, b) a, generalize to polymorphic lens
_1 :: Lens (a, c) (b, c) a b
_1 g (a, b) = fmap (\a -> (a, b)) (g a)

(>-) :: Lens' a b -> Lens' b c -> Lens' a c
(>-) = (.)

-- Modify over a focus.
-- View the existing value, run a function on it, and set it back into
-- the same field.
over :: Lens' s a -> (a -> a) -> s -> s
over l f s = set l (f (get l s)) s

-- Example from Optics by Example
data Temp = Temp { _location :: String, _celsius :: Float } deriving (Show)

-- Would be generated by Template Haskell
celsius :: Lens' Temp Float
celsius r (Temp l c) = Temp l <$> r c

location :: Lens' Temp String
location r (Temp l c) = (\l -> Temp l c) <$> r l

berlin = Temp "Berlin" 7.0

cToF :: Float -> Float
cToF c = (c * (9/5)) + 32

fToC :: Float -> Float
fToC f = (f - 32) * (5/9)

lens :: (a -> b) -> (a -> b -> a) -> Lens' a b
lens gt st r a = st a <$> r (gt a)

-- Fahrenheit virtual lens
fahrenheit :: Lens' Temp Float
fahrenheit = lens gt st
  where
    gt = cToF . view celsius
    st t f = set celsius (fToC f) t
